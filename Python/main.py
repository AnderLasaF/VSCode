#Data clases are meant to help writing data oriented classes (represent a point, vector or any data structure). Different from behavior
#oriented classes, such as a payment service. How does a dataclass help to represent data oriented classes? It gives the chance to
#represent the object as a string easily, compare the objects with other objects, and define the data structure easily and add an easy
#initialization mechanism to it.

import random
import string
from typing import List #function annotation for type hint used on the list of strings through typing module
from dataclasses import dataclass, field #import the decorator dataclass

def generate_id() -> str:
    return "".join(random.choices(string.ascii_uppercase, k=12)) #generates random string of lenght 12 from uppercase characters

@dataclass(frozen=True)  #when we freeze the dataclass, once we've initialized the object we can't change it, it will be read only
#From Python 3.10 and on there is an option for the dataclass: kw_only. With this argument set to true, we can only assign attribute values through keywords. So we can't
#just assign to an instance: person = Person("John","123 Main St"). We are forcing to supply the keywords
class Person:  #Person class that creates objects with name and address attributes
    #after using the decorador, we can define the instance variables
    #initialized (__init__) method is going to be generated by the data class decorator. __repr__ instead of __str__ will be generated
    name: str
    address: str

    #assigning default values
    active: bool = True #we can set default values for data classes
    email_addresses: List[str] = field(default_factory = list)  #this factory function assigns the a different list for every instance of the class
    id: str = field(init = False, default_factory=generate_id)  #default value defined through "field", which makes use of a function to define an random id
    _search_string: str = field(init=False, repr=False)  #not initialised, we need to make sure it gets initialised. Not included in the repr of the object

    def __post_init__(self) -> None:  #post initializer to generate extra fields
        self._search_string = f"{self.name} {self.address}" #one underscore means protected, two means private. In any case, not supposed to be changed outside the class 


def main() -> None:
    person = Person(name="John", address="123 Main St")  #the attributes that have a default value are not defined in the initializer
    print(person)

if __name__ == "__main__":
    main()  #we only call the main function if we are executing this module directly (main.py)

